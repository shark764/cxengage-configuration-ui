// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`entities reducer FETCH_DATA_FULFILLED sets the data as the immutable value passed in 1`] = `
Immutable.Map {
  "mockEntity": Immutable.Map {
    "data": Immutable.List [
      Immutable.Map {
        "mockEntityId": "mock entity id",
      },
    ],
  },
}
`;

exports[`entities reducer FETCH_DATA_REJECTED sets the data to an empty List 1`] = `
Immutable.Map {
  "mockEntity": Immutable.Map {
    "data": Immutable.List [],
  },
}
`;

exports[`entities reducer SET_CURRENT_ENTITY sets the current entity 1`] = `
Immutable.Map {
  "currentEntity": "mock current entity",
}
`;

exports[`entities reducer SET_SELECTED_ENTITY_ID with setSelectedEntityCreate() sets the current entity's selected entity id to "create" 1`] = `
Immutable.Map {
  "currentEntity": "mockEntity",
  "mockEntity": Immutable.Map {
    "selectedEntityId": "create",
  },
}
`;

exports[`entities reducer SET_SELECTED_ENTITY_ID with setSelectedEntityId() sets the current entity's selected entity id 1`] = `
Immutable.Map {
  "currentEntity": "mockEntity",
  "mockEntity": Immutable.Map {
    "selectedEntityId": "mock entity id",
  },
}
`;

exports[`entities reducer SET_SELECTED_ENTITY_ID with unsetSelectedEntityId() sets the current entity's selected entity id to "" 1`] = `
Immutable.Map {
  "currentEntity": "mockEntity",
  "mockEntity": Immutable.Map {
    "selectedEntityId": "",
  },
}
`;

exports[`entities reducer UPDATE_ENTITY calls setEntityUpdatingHelper correctly 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "mock initial state",
      Object {
        "entityId": "mock entity id",
        "entityName": "mock entity",
        "type": "UPDATE_ENTITY",
        "values": "mock values",
      },
      true,
    ],
  ],
}
`;

exports[`entities reducer UPDATE_ENTITY_FULFILLED when the entity is present merges the result in and sets "updating" to false 1`] = `
Immutable.Map {
  "mockEntity": Immutable.Map {
    "data": Immutable.List [
      Immutable.Map {
        "id": "mock entity id",
        "mockResult": "mock result value",
        "updating": false,
      },
    ],
  },
}
`;

exports[`entities reducer UPDATE_ENTITY_REJECTED calls setEntityUpdatingHelper correctly 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "mock inital state",
      Object {
        "entityId": "mock entity id",
        "entityName": "mock entity",
        "type": "UPDATE_ENTITY_REJECTED",
      },
      false,
    ],
  ],
}
`;

exports[`entities reducer helper functions setEntityUpdatingHelper when the entity is present sets the entity's updated field 1`] = `
Immutable.Map {
  "mockEntity": Immutable.Map {
    "data": Immutable.List [
      Immutable.Map {
        "id": "mock entity id",
        "updating": true,
      },
    ],
  },
}
`;

exports[`entities reducer returns the correct initial state 1`] = `
Immutable.Map {
  "flows": Immutable.Map {
    "data": undefined,
  },
  "customMetrics": Immutable.Map {
    "data": undefined,
    "selectedEntityId": "",
    "sidePanelWidth": 550,
    "confirmationDialogType": undefined,
    "readPermission": Immutable.List [
      "CUSTOM_STATS_READ",
    ],
    "updatePermission": Immutable.List [
      "CUSTOM_STATS_UPDATE",
    ],
  },
  "lists": Immutable.Map {
    "selectedSubEntityId": undefined,
    "subEntity": "listItems",
    "readPermission": Immutable.List [
      "VIEW_ALL_LISTS",
    ],
    "data": undefined,
    "createPermission": Immutable.List [
      "MANAGE_ALL_LISTS",
    ],
    "confirmationDialogType": undefined,
    "updatePermission": Immutable.List [
      "MANAGE_ALL_LISTS",
    ],
    "selectedEntityId": "",
    "sidePanelWidth": 550,
    "subEntitySaving": false,
  },
  "none": Immutable.Map {},
  "outboundIdentifiers": Immutable.Map {
    "readPermission": Immutable.List [
      "OUTBOUND_IDENTIFIER_READ",
    ],
    "data": undefined,
    "createPermission": Immutable.List [
      "OUTBOUND_IDENTIFIER_CREATE",
    ],
    "confirmationDialogType": undefined,
    "disablePermission": Immutable.List [
      "OUTBOUND_IDENTIFIER_DISABLE",
    ],
    "updatePermission": Immutable.List [
      "OUTBOUND_IDENTIFIER_MODIFY",
    ],
    "selectedEntityId": "",
    "sidePanelWidth": 550,
    "assignPermission": Immutable.List [
      "OUTBOUND_IDENTIFIER_ASSIGN",
    ],
  },
  "listTypes": Immutable.Map {
    "data": undefined,
  },
  "currentEntity": "none",
  "outboundIdentifierLists": Immutable.Map {
    "readPermission": Immutable.List [
      "OUTBOUND_IDENTIFIER_READ",
    ],
    "data": undefined,
    "createPermission": Immutable.List [
      "OUTBOUND_IDENTIFIER_CREATE",
    ],
    "metaData": Immutable.Map {
      "listDependency": "outboundIdentifiers",
    },
    "confirmationDialogType": undefined,
    "disablePermission": Immutable.List [
      "OUTBOUND_IDENTIFIER_DISABLE",
    ],
    "updatePermission": Immutable.List [
      "OUTBOUND_IDENTIFIER_MODIFY",
    ],
    "selectedEntityId": "",
    "sidePanelWidth": 550,
    "assignPermission": Immutable.List [
      "OUTBOUND_IDENTIFIER_ASSIGN",
    ],
  },
  "emailTemplates": Immutable.Map {
    "data": undefined,
    "selectedEntityId": "",
    "sidePanelWidth": 550,
    "confirmationDialogType": undefined,
    "readPermission": Immutable.List [
      "USER_MANAGEMENT_EMAIL_READ",
    ],
    "updatePermission": Immutable.List [
      "USER_MANAGEMENT_EMAIL_UPDATE",
      "PLATFORM_USER_MANAGEMENT_EMAIL_UPDATE",
    ],
  },
}
`;
