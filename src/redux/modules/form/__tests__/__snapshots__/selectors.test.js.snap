// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createFormName returns proper values 1`] = `
Object {
  "form": "mock current entity:mock current entity id",
}
`;

exports[`formSubmission returns proper values 1`] = `
Object {
  "dirty": true,
  "type": "FORM_SUBMIT",
  "values": Immutable.Map {
    "id": "mockId",
    "name": "mockName",
    "type": "mockType",
  },
}
`;

exports[`getCurrentFormInitialValues returns the current form's inital values converted to javascript 1`] = `
Object {
  "mockProperty": "mock value",
}
`;

exports[`getCurrentFormValueByFieldName Returns proper value by field name given 1`] = `"mockValue"`;

exports[`getCurrentSubForm Returns proper form map by given formId 1`] = `
Immutable.Map {
  "initial": Immutable.Map {
    "mockProperty": "mock value",
  },
  "values": Immutable.Map {
    "field": "mockValue",
  },
}
`;

exports[`getCurrentSubFormValueByFieldName Returns proper value by field name and formId given 1`] = `"mockValue"`;

exports[`isFormInvalid correctly calls redux-form's 'isInvalid' method 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "mock current entity form id",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": [Function],
    },
  ],
}
`;

exports[`isFormPristine correctly calls redux-form's 'isPristine' method 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "mock current entity form id",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": [Function],
    },
  ],
}
`;

exports[`selectFormInitialValues returns immutable map {active: true} when getSelectedEntity is undefined 1`] = `
Immutable.Map {
  "active": true,
}
`;

exports[`selectFormInitialValues returns new map {active: true} when getSelectedEntityId equals bulk 1`] = `Immutable.Map {}`;

exports[`selectFormInitialValues returns the selected entity when not undefined or create 1`] = `
Immutable.Map {
  "id": "mockId",
  "name": "mockName",
}
`;

exports[`selectFormInitialValues returns the selected entity when not undefined or create and has "active" key 1`] = `
Immutable.Map {
  "id": "mockId",
  "name": "mockName",
  "active": true,
}
`;

exports[`subEntityFormSubmission returns proper values 1`] = `
Object {
  "dirty": true,
  "type": "SUB_ENTITY_FORM_SUBMIT",
  "values": Object {
    "id": "mockSubEntityId",
    "name": "mockSubEntityName",
  },
}
`;
