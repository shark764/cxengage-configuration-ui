// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Maps state to props only using selectors validates object created from mapStateToProps 1`] = `
Object {
  "disableShared": false,
  "inherited": undefined,
  "initialValues": Immutable.Map {
    "active": true,
    "isDefault": false,
    "shared": false,
    "reasons": Array [],
  },
  "isFetching": false,
  "isSaving": true,
  "key": "mockId",
  "reasonHeaders": undefined,
  "selectedEntityId": "mockId",
  "sharedFormValue": true,
  "userHasSharePermission": true,
  "userHasUpdatePermission": true,
}
`;

exports[`createFormName returns proper values 1`] = `undefined`;

exports[`formSubmission returns proper values 1`] = `undefined`;

exports[`reasonLists Renders renders 1`] = `
<Connect(ReduxForm)
  disableShared={false}
  initialValues={
    Immutable.Map {
      "active": true,
      "isDefault": false,
      "shared": false,
      "reasons": Array [],
    }
  }
  isFetching={false}
  isSaving={true}
  key="mockId"
  removeCategoryItems={[Function]}
  removeReasonListItem={[Function]}
  selectedEntityId="mockId"
  setSelectedSubEntityId={[Function]}
  sharedFormValue={true}
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "clear": [Function],
        "get": [Function],
        "notify": [Function],
        "subscribe": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      },
      "unsubscribe": [Function],
    }
  }
  userHasSharePermission={true}
  userHasUpdatePermission={true}
>
  Child
</Connect(ReduxForm)>
`;
