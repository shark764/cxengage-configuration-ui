// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Maps state to props only using selectors validates object created from mapStateToProps 1`] = `
Object {
  "endpointFieldValue": "mockEndpointValue",
  "existingCategories": "mockExistingCategories",
  "hierarchyInputText": "mockHierarchyInputValue",
  "initialValues": "mockUpdateTransferListItemValues",
  "isSaving": true,
  "isUserCreatingNewCategory": true,
  "key": "mockSelectedSubEntityId",
  "selectActiveQueueNames": "mockActiveQueueNames",
  "selectedContactType": "mockSelectedContactType",
  "selectedSubEntityId": "mockSelectedSubEntityId",
  "transferListItemName": "mockSelectedSubEntityId",
  "transferListName": "mockTransferListName",
}
`;

exports[`TransferLists Renders renders 1`] = `
<Connect(ReduxForm)
  endpointFieldValue="mockEndpointValue"
  existingCategories="mockExistingCategories"
  hierarchyInputText="mockHierarchyInputValue"
  initialValues="mockUpdateTransferListItemValues"
  isSaving={true}
  isUserCreatingNewCategory={true}
  key="mockSelectedSubEntityId"
  onCancel={[Function]}
  selectActiveQueueNames="mockActiveQueueNames"
  selectedContactType="mockSelectedContactType"
  selectedSubEntityId="mockSelectedSubEntityId"
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "clear": [Function],
        "get": [Function],
        "notify": [Function],
        "subscribe": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      },
      "unsubscribe": [Function],
    }
  }
  transferListItemName="mockSelectedSubEntityId"
  transferListName="mockTransferListName"
>
  Child
</Connect(ReduxForm)>
`;

exports[`formSubmission returns proper values 1`] = `
Object {
  "dirty": true,
  "type": "SUB_ENTITY_FORM_SUBMIT",
  "values": Array [
    "mockEndpoint1",
    "mockEndpoint2",
  ],
}
`;
